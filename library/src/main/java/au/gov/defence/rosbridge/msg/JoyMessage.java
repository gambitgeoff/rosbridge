package au.gov.defence.rosbridge.msg;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 * sensor_msgs/Joy Message
 * File: sensor_msgs/Joy.msg
 * Raw Message Definition
 * # Reports the state of a joysticks axes and buttons.
 * Header header           # timestamp in the header is the time the data is received from the joystick
 * float32[] axes          # the axes measurements from a joystick
 * int32[] buttons         # the buttons measurements from a joystick
 * <p>
 * Compact Message Definition
 * std_msgs/Header header
 * float32[] axes
 * int32[] buttons
 * autogenerated on Sun, 09 Feb 2020 03:18:29
 */

public class JoyMessage extends Message {

    private Header mHeader;
    private JSONArray mAxes;
    private JSONArray mButtons;
    private int mSeq = 0;

    public JoyMessage() { this(new Header());}

    public JoyMessage(Header inHeader) {
        super();
        mHeader = inHeader;
        mAxes = new JSONArray();
        mButtons = new JSONArray();
    }

    public void setButtonValue(int inIndex, int inValue) {
        try {
            mButtons.put(inIndex, inValue);
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }

    public void setAxisValue(int inIndex, double inValue) {
        try {
            mAxes.put(inIndex, inValue);
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }

    @Override
    public JSONObject getJSON() {
        try {
            JSONObject msgJoyMessage = new JSONObject();
            JSONObject header = mHeader.getJSON();//            msgJoyMessage.put("header", header);
            msgJoyMessage.put("header", header);
            msgJoyMessage.put("axes", mAxes);
            msgJoyMessage.put("buttons", mButtons);
            return msgJoyMessage;
        } catch (JSONException jse) {
            jse.printStackTrace();
        }
        return null;
    }

    @Override
    public Message updateMessage(JSONObject inJSONObject) {
        try {
            mAxes = inJSONObject.getJSONArray("axes");
            mButtons = inJSONObject.getJSONArray("buttons");
            return this;
        }
        catch(JSONException jse)
        {
            jse.printStackTrace();
        }
        return null;
    }

    public int getButtonA()
    {
        try {
            int returnValue = mButtons.getInt(1);
            return returnValue;
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return -1;
    }

    public int getButtonB()
    {
        try {
            int returnValue = mButtons.getInt(0);
            return returnValue;
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return -1;
    }

    public int getButtonY()
    {
        try {
            int returnValue = mButtons.getInt(2);
            return returnValue;
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return -1;
    }

    public int getButtonX()
    {
        try {
            int returnValue = mButtons.getInt(3);
            return returnValue;
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return -1;
    }

    /**
     *  Checks if there's any movement in the left thumb stick
     * @return
     */
    public boolean getLeftThumbMovement()
    {
        boolean returnValue = false;
        try {
            double val1 = Double.parseDouble(mAxes.getString(0));
            double val2 = Double.parseDouble(mAxes.getString(1));
            if (val1 > 0.1 || val2 >0.1)
                returnValue = true;
            else if (val1 < -0.1 || val2 < -0.1)
                return true;
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return returnValue;
    }
}
